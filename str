le voila la structeur de project :
D:\AI_Engineer
├── .env
├── .gitignore
├── index.html
├── Procfile
├── README.md
├── str
├── .github/
│   └── workflows/
│       ├── jekyll-docker.yml
│       ├── jekyll-gh-pages.yml
│       └── static.yml
├── .vscode/
│   └── settings.json
├── assets/
│   ├── fonts/
│   │   ├── fontawesome-webfont.eot
│   │   ├── fontawesome-webfont.svg
│   │   ├── fontawesome-webfont.ttf
│   │   ├── fontawesome-webfont.woff
│   │   ├── fontawesome-webfont.woff2
│   │   └── FontAwesome.otf
│   └── images/
│       ├── acc.png
│       ├── agile.png
│       ├── anaconda-icon.png
│       └── ...
├── chatbot/
│   ├── __init__.py
│   ├── chatbot_logic.py
│   ├── rag_pipeline.py
│   ├── __pycache__/
│   ├── docs/
│   │   └── Abdellah_Cv.pdf
│   │   └── projets.txt
│   │   └── README.md 
│   └── vectorstore/
└── web/
    ├── api.py
    └── requirements.txt
le voila le code de chaque fichier :
.env:
GOOGLE_API_KEY=AIzaSyCa09ycr-awLJcbrlKMcQZQoC9Lfj34JC4
# models/gemini-2.0-flash
chatbot_logic.py:
import os
from dotenv import load_dotenv
from langchain.chains import RetrievalQA
from langchain_community.vectorstores import FAISS
from langchain_google_genai import ChatGoogleGenerativeAI, GoogleGenerativeAIEmbeddings
from chatbot.rag_pipeline import RAGPipeline

load_dotenv()

class PortfolioChatbot:
    def __init__(self, google_api_key=None):
        self.api_key = google_api_key or os.getenv("GOOGLE_API_KEY")
        self.vectorstore_path = "chatbot/vectorstore"
        self._load_vectorstore()

    def _load_vectorstore(self):
        embeddings = GoogleGenerativeAIEmbeddings(
            model="models/embedding-001",
            google_api_key=self.api_key
        )

        index_path = os.path.join(self.vectorstore_path, "index.faiss")

        # Vérifie si l'index existe
        if os.path.exists(index_path):
            print("[INFO] FAISS index found. Loading it...")
            self.vectorstore = FAISS.load_local(
                self.vectorstore_path,
                embeddings,
                allow_dangerous_deserialization=True
            )
        else:
            print("[WARNING] FAISS index not found. Rebuilding the vectorstore...")
            pipeline = RAGPipeline(google_api_key=self.api_key)
            pipeline.build_vectorstore()

            # Recharge après génération
            if os.path.exists(index_path):
                self.vectorstore = FAISS.load_local(
                    self.vectorstore_path,
                    embeddings,
                    allow_dangerous_deserialization=True
                )
            else:
                raise RuntimeError("Failed to create FAISS index. Ensure your pipeline works correctly.")

        self.llm = ChatGoogleGenerativeAI(
            model="gemini-2.0-flash",
            google_api_key=self.api_key,
            temperature=0.3
        )

        self.qa_chain = RetrievalQA.from_chain_type(
            llm=self.llm,
            retriever=self.vectorstore.as_retriever()
        )

    def get_answer(self, query: str):
        result = self.qa_chain({"query": query})
        return result["result"], []

    def reset_conversation(self):
        # Aucun historique à gérer pour Gemini dans cette config
        pass

    def update_knowledge_base(self) -> bool:
        pipeline = RAGPipeline(google_api_key=self.api_key)
        return pipeline.build_vectorstore()


rag_piplines.py:
import os
from langchain_community.vectorstores import FAISS
from langchain_community.document_loaders import TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_google_genai import GoogleGenerativeAIEmbeddings
from dotenv import load_dotenv

load_dotenv()

class RAGPipeline:
    def __init__(self, google_api_key=None):
        self.api_key = google_api_key or os.getenv("GOOGLE_API_KEY")
        self.docs_path = "chatbot/docs/projets.txt"  # Chemin vers ton fichier de base de connaissances
        self.vectorstore_path = "chatbot/vectorstore"

    def build_vectorstore(self) -> bool:
        if not os.path.exists(self.docs_path):
            raise FileNotFoundError(f"[ERROR] Document non trouvé : {self.docs_path}")

        # 1. Charger le document
        loader = TextLoader(self.docs_path, encoding="utf-8")
        documents = loader.load()

        # 2. Diviser en petits chunks
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=100)
        docs = text_splitter.split_documents(documents)

        # 3. Générer les embeddings avec Gemini
        embeddings = GoogleGenerativeAIEmbeddings(
            model="models/embedding-001",
            google_api_key=self.api_key
        )

        # 4. Créer et sauvegarder le vectorstore
        vectorstore = FAISS.from_documents(docs, embeddings)
        vectorstore.save_local(self.vectorstore_path)

        print(f"[INFO] Vectorstore FAISS généré à : {self.vectorstore_path}")
        return True

api.py:

import os
import sys
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from dotenv import load_dotenv

# Add parent directory to path to import chatbot module
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from chatbot.chatbot_logic import PortfolioChatbot

# Load environment variables
load_dotenv()

app = Flask(__name__, static_folder='../') # Serve static files from parent directory

# Enable CORS with debugging options
CORS(app, 
    origins=["*", "http://localhost", "http://127.0.0.1", "file://"], 
    supports_credentials=True,
    allow_headers=["Content-Type", "Authorization"],
    expose_headers=["Content-Type"],
    methods=["GET", "POST", "OPTIONS"]
)

# Initialize chatbot
api_key = os.getenv("GOOGLE_API_KEY", "")
chatbot = None

# Try to initialize chatbot or handle errors gracefully
try:
    chatbot = PortfolioChatbot(google_api_key=api_key)
    print("Chatbot initialized successfully!")
except Exception as e:
    print(f"Error initializing chatbot: {str(e)}")

@app.route('/api/chat', methods=['POST', 'OPTIONS'])
def chat():
    # Handle CORS preflight requests
    if request.method == 'OPTIONS':
        return '', 204
        
    # Debug info
    print(f"Request received from: {request.remote_addr}")
    print(f"Request headers: {request.headers}")
    
    # Process actual request
    try:
        data = request.json
        if not data or 'message' not in data:
            return jsonify({'error': 'No message provided'}), 400
        
        if chatbot is None:
            return jsonify({'error': 'Chatbot not initialized properly'}), 500
            
        print(f"Processing message: {data['message']}")
        response, _ = chatbot.get_answer(data['message'])
        print(f"Response generated: {response[:50]}...")  # Print first 50 chars
        
        return jsonify({'response': response})
    except Exception as e:
        print(f"Error processing request: {str(e)}")
        return jsonify({'error': str(e)}), 500

# Test endpoint to verify API is working
@app.route('/api/test', methods=['GET'])
def test():
    return jsonify({'status': 'ok', 'message': 'API is working!'})

# Serve index.html at the root path
@app.route('/', defaults={'path': ''})
@app.route('/<path:path>')
def serve(path):
    if path == "" or path == "index.html":
        return send_from_directory('../', 'index.html')
    return send_from_directory('../', path)

if __name__ == '__main__':
    # Use the PORT environment variable provided by Railway or default to 5000
    port = int(os.environ.get('PORT', 5000))
    # Print startup information
    print(f"Starting server on port {port}")
    print(f"API will be available at http://localhost:{port}/api/chat")
    print(f"Test endpoint available at http://localhost:{port}/api/test")
    
    # Bind to 0.0.0.0 to make accessible from outside the container
    app.run(host='0.0.0.0', debug=True, port=port)
code html css js pour le chatbot:

<!-- Chatbot Container -->
<div id="chatbot-container">
    <div class="chatbot-header">
      <span>Assistant</span>
      <span class="close-btn" id="chatbot-close">&times;</span>
    </div>
    <div class="chatbot-messages" id="chatbot-messages">
      <div class="chat-message bot-message">
        Bonjour ! Posez-moi une question sur le portfolio.
      </div>
    </div>
    <div class="typing-indicator" id="typing-indicator">L'assistant écrit...</div>
    <div class="chatbot-input">
      <input type="text" id="user-input" placeholder="Posez votre question..." />
      <button id="send-btn"><i class="fas fa-paper-plane"></i></button>
    </div>
  </div>
  
  <!-- Script JS -->
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const toggleBtn = document.getElementById('chatbot-toggle');
      const chatbot = document.getElementById('chatbot-container');
      const closeBtn = document.getElementById('chatbot-close');
      const userInput = document.getElementById('user-input');
      const sendBtn = document.getElementById('send-btn');
      const messagesContainer = document.getElementById('chatbot-messages');
      const typingIndicator = document.getElementById('typing-indicator');
  
      // IMPORTANT: Hard-coded API URL that works in all environments
      // Change this to your deployed URL when you deploy to Railway
      const API_URL = 'https://aiengineer-production-7f4a.up.railway.app/api/chat';
      // For local testing, you might use:
      // const API_URL = 'http://localhost:5000/api/chat';
      // For testing on Railway, you might use:
      // const API_URL = 'https://your-railway-app-name.up.railway.app/api/chat';
      
      // When you deploy to Railway, you'd change it to something like:
      // const API_URL = 'https://your-railway-app-name.up.railway.app/api/chat';
      
      // Log the API URL for debugging
      console.log('Chatbot using API URL:', API_URL);
  
      // Check if toggle button exists (it might not in some layouts)
      if (toggleBtn) {
        toggleBtn.addEventListener('click', () => {
          chatbot.style.display = chatbot.style.display === 'flex' ? 'none' : 'flex';
          if (chatbot.style.display === 'flex') userInput.focus();
        });
      }
  
      closeBtn.addEventListener('click', () => {
        chatbot.style.display = 'none';
      });
  
      sendBtn.addEventListener('click', sendMessage);
  
      userInput.addEventListener('keypress', function (e) {
        if (e.key === 'Enter') sendMessage();
      });
  
      function sendMessage() {
        const message = userInput.value.trim();
        if (message.length === 0) return;
  
        addMessage(message, 'user');
        userInput.value = '';
        typingIndicator.style.display = 'block';
  
        // Fetch with specific error handling
        fetch(API_URL, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message }),
        })
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
          })
          .then(data => {
            typingIndicator.style.display = 'none';
            if (data && data.response) {
              addMessage(data.response, 'bot');
            } else {
              addMessage('Désolé, je n\'ai pas pu traiter votre demande.', 'bot');
            }
          })
          .catch(error => {
            typingIndicator.style.display = 'none';
            console.error('API connection error:', error);
            addMessage(`Erreur de connexion: Impossible de contacter le serveur API à ${API_URL}. Vérifiez que le serveur est en cours d'exécution.`, 'bot');
          });
      }
  
      function addMessage(message, sender) {
        const div = document.createElement('div');
        div.classList.add('chat-message', sender === 'user' ? 'user-message' : 'bot-message');
        div.textContent = message;
        messagesContainer.appendChild(div);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }
    });
  </script>
